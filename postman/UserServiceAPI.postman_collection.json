{
	"info": {
		"_postman_id": "ab94c442-82e2-4d70-b8a5-7327e207608b",
		"name": "UserServiceAPI",
		"description": "# üöÄ Come√ßando aqui\n\nEsta cole√ß√£o cont√©m endpoints para opera√ß√µes CRUD (GET, POST, PUT, DELETE) da API de usu√°rios.\n\n## üîñ **Como usar esta cole√ß√£o**\n\n#### **Passo 1: Enviar requisi√ß√µes**\n\nA API REST permite realizar opera√ß√µes CRUD usando os m√©todos HTTP POST, GET, PUT e DELETE.\n\nEsta cole√ß√£o cont√©m todos estes tipos de requisi√ß√µes. Abra cada uma e clique em \"Send\" para ver o resultado.\n\n#### **Passo 2: Visualizar respostas**\n\nObserve a aba de resposta para ver o c√≥digo de status (200 OK), tempo de resposta e tamanho.\n\n#### **Passo 3: Enviar dados no Body**\n\nAtualize ou adicione novos dados no \"Body\" na requisi√ß√£o POST. Normalmente, dados no Body tamb√©m s√£o usados em requisi√ß√µes PUT.\n\n```\n{\n    \"name\": \"Seu nome aqui\",\n    \"email\": \"seu@email.com\"\n}\n\n ```\n\n#### **Passo 4: Atualizar a vari√°vel**\n\nVari√°veis permitem armazenar e reutilizar valores no Postman. A vari√°vel `base_url` est√° configurada com o endpoint da API.\n\n#### **Passo 5: Testes**\n\nOs testes ajudam a confirmar que a API est√° funcionando como esperado. Voc√™ pode escrever scripts de teste em JavaScript e ver o resultado na aba \"Test Results\".\n\n## üí™ Dicas\n\n- Use pastas para agrupar requisi√ß√µes relacionadas e organizar a cole√ß√£o\n- Adicione mais scripts para verificar se a API funciona conforme esperado\n\n## üìö Documenta√ß√£o\n\nEsta √© a cole√ß√£o Postman para a API de usu√°rios constru√≠da com Spring Boot e MySQL. A API faz parte de uma arquitetura de microservi√ßos e permite gerenciar usu√°rios atrav√©s de endpoints REST.",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "10550343"
	},
	"item": [
		{
			"name": "Get users",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{base_url}}/users",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"users"
					]
				},
				"description": "Esta √© uma requisi√ß√£o GET usada para obter dados de todos os usu√°rios. N√£o possui body, mas retorna a lista completa de usu√°rios cadastrados.\n\nUma resposta bem sucedida ter√° status `200 OK` e retornar√° um array JSON com os dados dos usu√°rios."
			},
			"response": []
		},
		{
			"name": "Get user by id",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{base_url}}/users/1",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"users",
						"1"
					]
				},
				"description": "Esta √© uma requisi√ß√£o GET usada para obter dados de um usu√°rio espec√≠fico pelo ID. O ID √© passado na URL.\n\nUma resposta bem sucedida ter√° status `200 OK` e retornar√° um objeto JSON com os dados do usu√°rio."
			},
			"response": []
		},
		{
			"name": "Get users by ids",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{base_url}}/users?ids=1,2,3",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"users"
					],
					"query": [
						{
							"key": "ids",
							"value": "1,2,3"
						}
					]
				},
				"description": "Esta √© uma requisi√ß√£o GET usada para obter dados de m√∫ltiplos usu√°rios pelos seus IDs. Os IDs s√£o passados como par√¢metros de query na URL, separados por v√≠rgula.\n\nUma resposta bem sucedida ter√° status `200 OK` e retornar√° um array JSON com os dados dos usu√°rios solicitados."
			},
			"response": []
		},
		{
			"name": "Post user",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Successful POST request\", function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n\t\"name\": \"Danilo\",\n\t\"email\": \"danilo@teste.com\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}/users",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"users"
					]
				},
				"description": "Esta √© uma requisi√ß√£o POST usada para criar um novo usu√°rio. Os dados s√£o enviados no body da requisi√ß√£o em formato JSON.\n\nUma resposta bem sucedida retornar√° status `201 Created` e os dados do usu√°rio criado."
			},
			"response": []
		},
		{
			"name": "Post user with error",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Successful POST request\", function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n\t\"name\": \"Danilo\",\n\t\"email\": \"\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}/users",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"users"
					]
				},
				"description": "Esta √© uma requisi√ß√£o POST que demonstra um caso de erro ao tentar criar um usu√°rio com email vazio. O email √© um campo obrigat√≥rio.\n\nA resposta deve retornar um status de erro 400 Bad Request com uma mensagem explicando o problema."
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "id",
			"value": "1"
		},
		{
			"key": "base_url",
			"value": "https://postman-rest-api-learner.glitch.me/"
		}
	]
}